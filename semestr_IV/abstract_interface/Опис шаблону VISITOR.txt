Шаблон  проектування Visitor (Відвідувач) застосовується
якщо необхідно відділити певний алгоритм від об’єктів 
для яких цей алгоритм має бути виконаний. 
Він дозволяє додавати нові операції у існуючі структури без змін
самих структур, що у свою чергу дозволяє уникнути процесу
«засмічування» цими операціям самих класів.

Шаблон Visitor (Відвідувач) складається з кількох частин, що взаємодіють між собою:
• Відвідувач (Visitor) – абстрактний клас, що визначає дію над кожним
  класом конкретних елементів.  Містить абстрактний метод visit(obj : ConcreteElement).
• Конкретний відвідувач (ConcreteVisitor) – нащадок класу Visitor –
  заміщує абстрактний метод visit(obj : ConcreteElement) конкретною
  реалізацією.
• Елемент (Element) – абстрактний клас, що визначає метод  accept(visitor : Visitor),
  який отримує об’єкт відвідувача як аргумент.
• Конкретний елемент (ConcreteElement) – конкретний клас, нащадок класу
  Елемент, що заміщує метод accept(visitor : Visitor), який отримує
  об’єкт відвідувача як аргумент.
• Клієнт (Client) – структура елементів, надає високорівневий інтерфейс, що
  дозволяє відвідувачу опрацьовувати елементи.


  Зв’язок екземпляра класу Елемент і Відвідувача відбувається таким чином:
    • Для елемента викликається метод accept() фактичним параметром
      якого є конкретний відвідувач (елемент приймає відвідувача)
    • В свою чергу для цього відвідувача викликається метод visit()
      параметром якого є сам елемент.
    • Відвідувач, у методі visit() здійснює перевірку до якого класу належить
      елемент і залежно від цього здійснює відповідний перелік дій.


ЗАВДАННЯ 1. Реалізувати клас Pet, як абстрактний елемент та його нащадки Cat та Dog, як конкретні елементи, екземпляри яких можуть відвідувати відвідувачі. Для цього опишіть абстрактний клас Visitor (шаблон проектування) та конкретні його реалізації – Veterinarian (Ветеринар, може лікувати тварину),
Scoundrel (Негідник, ображає тварин), DogTrainer (Дресирувальник собак), Master (Господар, вміє годувати тварин) та Child (Дитина, грається з домашніми тваринами). Додати клас Parrot.


ЗАВДАННЯ 2. Як відомо діагностувати можна найрізноманітніші об’єкти –
автомобілі, здоров’я людей чи тварин, техніку. Отже, можна описати інтерфейс
Diagnosable, який буде містити (абстрактний) метод diagnose() – діагностування
стану об’єкту. Опишіть базові класи Car, Human, Animal. На основі вищенаведених базових
класів опишемо конкретні класи DiagnosableCar, DiagnosableHuman та DiagnosableAnimal  відповідно,
кожен з яких, крім цього, буде реалізовувати інтерфейс Diagnosable. Отже, будь-який
екземпляр класів DiagnosableCar, DiagnosableHuman, DiagnosableAnimal можна буде діагностувати
(причому ця діагностика буде залежати від того, до якого класу належить об’єкт). 

ЗАВДАННЯ 3 (с.126). Реалізуємо шаблон Спостерігач у такому вигляді – об'єкти класу
FileReader читають текстові файли та передають кожен прочитай рядок файлу усім
підписаним спостерігачам. 